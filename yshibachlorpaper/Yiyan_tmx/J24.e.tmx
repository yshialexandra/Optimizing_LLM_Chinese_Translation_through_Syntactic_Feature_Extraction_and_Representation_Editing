<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<tmx version="1.4">
<header creationtool="ABBYY Aligner" creationtoolversion="1.0" segtype="sentence" o-tmf="ATM" adminlang="en-US" srclang="en-US" datatype="plaintext">
</header>
<body>
<tu>
<tuv xml:lang="en-US"><seg>Chapter 10 STIMULATION</seg></tuv>
<tuv xml:lang="zh-CN"><seg>第10章 模拟</seg></tuv>
</tu>
<tu>
<tuv xml:lang="en-US"><seg>10.1 Introduction</seg></tuv>
<tuv xml:lang="zh-CN"><seg>引言</seg></tuv>
</tu>
<tu>
<tuv xml:lang="en-US"><seg>How can we determine the probability of our winning a game of solitaire? </seg></tuv>
<tuv xml:lang="zh-CN"><seg>我们怎样确定在一场纸牌赌博中赢的概率？</seg></tuv>
</tu>
<tu>
<tuv xml:lang="en-US"><seg>(By solitaire, we mean any one of the standard solitaire games played with an ordinary deck of 52 playing cards and with some fixed playing strategy.) </seg></tuv>
<tuv xml:lang="zh-CN"><seg>（纸牌是指利用52张牌并具有固定规则的标准纸牌游戏。）</seg></tuv>
</tu>
<tu>
<tuv xml:lang="en-US"><seg>One possible approach is to start with the reasonable hypothesis that all (52)! possible arrangements of the deck of cards are equally likely to occur and then attempt to determine how many of these lead to a win. </seg></tuv>
<tuv xml:lang="zh-CN"><seg>一种可能的方法是假设一副牌有（52）!种可能的排列，各种排列是等可能的，然后观察其中多少种排列能使我们获胜。</seg></tuv>
</tu>
<tu>
<tuv xml:lang="en-US"><seg>Unfortunately, there does not appear to be any systematic method for determining the number of arrangements that lead to a win, and as (52)! is a rather large number and the only way to determine whether a particular arrangement leads to a win seems to be by playing the game out, it can be seen that this approach will not work.</seg></tuv>
<tuv xml:lang="zh-CN"><seg>然而这种方法显然不现实，因为没有任何系统性的算法能够算出何种组合能够获胜，而且（52）!是相当大的数，似乎唯一的办法确定在比赛结束之后真正得到胜利的组合，但这种方法对于我们显然没有任何用处。</seg></tuv>
</tu>
<tu>
<tuv xml:lang="en-US"><seg>In fact, it might appear that the determination of the probability of winning at solitaire is mathematically intractable. </seg></tuv>
<tuv xml:lang="zh-CN"><seg>看起来，确定一副纸牌的胜出的概率是数学的难题。</seg></tuv>
</tu>
<tu>
<tuv xml:lang="en-US"><seg>However, all is not lost, for probability falls not only within the realm of mathematics, but also within the realm of applied science; and, as in all applied sciences, experimentation is a valuable technique. </seg></tuv>
<tuv xml:lang="zh-CN"><seg>然而，并非没有一点希望，因为概率不仅属于数学领域，还属于应用科学领域。在所有应用科学中，试验是非常有价值的技术。</seg></tuv>
</tu>
<tu>
<tuv xml:lang="en-US"><seg>For our solitaire example, experimentation takes the form of playing a large number of such games or, better yet, programming a computer to do so. </seg></tuv>
<tuv xml:lang="zh-CN"><seg>对于单人纸牌游戏，试验就是玩很多次这样的纸牌游戏，或者可以编制一个计算机程序，让机器去玩牌。</seg></tuv>
</tu>
<tu>
<tuv xml:lang="en-US"><seg>After playing, say, n games, if we let. . .</seg></tuv>
<tuv xml:lang="zh-CN"><seg>经过几次玩牌以后，比如n次，令. . .</seg></tuv>
</tu>
<tu>
<tuv xml:lang="en-US"><seg>then Xi, i = 1, ... , n will be independent Bernoulli random variables for which . . .</seg></tuv>
<tuv xml:lang="zh-CN"><seg>则X，（i=1，2，...，n）是独立的伯努利随机变量，且. . .</seg></tuv>
</tu>
<tu>
<tuv xml:lang="en-US"><seg>Hence, by the strong law of large numbers, we know that. . . will, with probability 1, converge to P{win at solitaire}. </seg></tuv>
<tuv xml:lang="zh-CN"><seg>因此，由强大数定律可得. . .以概率1地收敛到P｛玩牌赢｝。</seg></tuv>
</tu>
<tu>
<tuv xml:lang="en-US"><seg>That is, by playing a large number of games, we can use the proportion of games won as an estimate of the probability of winning. </seg></tuv>
<tuv xml:lang="zh-CN"><seg>也就是说，玩大量次数的纸牌游戏以后，可以用赢牌的频率来估计赢的概率。</seg></tuv>
</tu>
<tu>
<tuv xml:lang="en-US"><seg>This method of empirically determining probabilities by means of experimentation is known as simulation.</seg></tuv>
<tuv xml:lang="zh-CN"><seg>用试验的方法来确定概率值的方法称为模拟。</seg></tuv>
</tu>
<tu>
<tuv xml:lang="en-US"><seg>In order to use a computer to initiate a simulation study, we must be able to generate the value of a uniform (0, 1) random variable; such variates are called random numbers. </seg></tuv>
<tuv xml:lang="zh-CN"><seg>为了用计算机实现模拟，必须先产生（0，1）上均匀分布的随机变量的值，这些值称为随机数。</seg></tuv>
</tu>
<tu>
<tuv xml:lang="en-US"><seg>To generate them, most computers have a built-in subroutine, called a random-number generator, whose output is a sequence of pseudorandom numbers-a sequence of numbers that is, for all practical purposes, indistinguishable from a sample from the uniform (0, 1) distribution. </seg></tuv>
<tuv xml:lang="zh-CN"><seg>大部分计算机有一内置程序，称为随机数发生器，它产生一个伪随机数序列，就所有实用目的来说，这个伪随机数序列与来自（0，1）均匀分布的样本没有区别。</seg></tuv>
</tu>
<tu>
<tuv xml:lang="en-US"><seg>Most random-number generators start with an initial value X0, called the seed, and then recursively compute values by specifying positive integers a, c, and m, and then letting . . .</seg></tuv>
<tuv xml:lang="zh-CN"><seg>通常随机数的生成是从一个初始值X。开始的，这个初始值被称作种子，然后给定正整数a，C，m，令. . .</seg></tuv>
</tu>
<tu>
<tuv xml:lang="en-US"><seg>where the foregoing means that aXn + c is divided by m and the remainder is taken as the value of Xn+1. </seg></tuv>
<tuv xml:lang="zh-CN"><seg>上式表明Xn+1的值是aXn，+c除以m的余数。</seg></tuv>
</tu>
<tu>
<tuv xml:lang="en-US"><seg>Thus, each Xn is either 0, 1, ... , m - 1, and the quantity Xn/m is taken as an approximation to a uniform (0, 1) random variable. </seg></tuv>
<tuv xml:lang="zh-CN"><seg>这样每个Xn的取值范围都是0，1，...m-1，且Xn/m近似地在（0，1）上均匀分布。</seg></tuv>
</tu>
<tu>
<tuv xml:lang="en-US"><seg>It can be shown that subject to suitable choices for a, c, and m, Equation (1.1) gives rise to a sequence of numbers that look as if they were generated from independent uniform (0, 1) random variables.</seg></tuv>
<tuv xml:lang="zh-CN"><seg>可以证明当取定合适的a，c，m值时，式（1.1）可以产生一个类似于独立的（0，1）上均匀随机变量序列的序列。</seg></tuv>
</tu>
<tu>
<tuv xml:lang="en-US"><seg>As our starting point in simulation, we shall suppose that we can simulate from the uniform (0, 1) distribution, and we shall use the term random numbers to mean independent random variables from this distribution.</seg></tuv>
<tuv xml:lang="zh-CN"><seg>开始模拟时，我们假定能够模拟（0，1）上均匀随机变量，并用随机数序列这一术语表示（0，1）上均匀随机变量的一组样本。</seg></tuv>
</tu>
<tu>
<tuv xml:lang="en-US"><seg>In the solitaire example, we would need to program a computer to play out the game starting with a given ordering of the cards. </seg></tuv>
<tuv xml:lang="zh-CN"><seg>在纸牌游戏的例子中，我们首先需要编程产生一个给定的纸牌的排列顺序。</seg></tuv>
</tu>
<tu>
<tuv xml:lang="en-US"><seg>However, since the initial ordering is supposed to be equally likely to be any of the (52)! possible permutations, it is also necessary to be able to generate a random permutation. </seg></tuv>
<tuv xml:lang="zh-CN"><seg>然而初始顺序必须是从（52）!种顺序中等可能地抽取出。因此，我们必须产生一个随机的排列。</seg></tuv>
</tu>
<tu>
<tuv xml:lang="en-US"><seg>Using only random numbers, the following algorithm shows how this can be accomplished. The algorithm begins by randomly choosing one of the elements and then putting it in position n; it then randomly chooses among the remaining elements and puts the choice in position n - 1, and so on. The algorithm efficiently makes a random choice among the remaining elements by keeping these elements in an ordered list and then randomly choosing a position on that list.</seg></tuv>
<tuv xml:lang="zh-CN"><seg>下面的算法说明怎样只利用随机数产生一个随机排列：先把n个元素放在1，2，...，n共n个位置上，然后利用一个随机数选定一个随机的位置，将这个位置上的对象放在n这个位置上，再在剩下n-1个对象中随机选出一个对象放在（n-1）这个位置上，最后所有的对象都放在相应的位置上，一个随机排列就产生了。</seg></tuv>
</tu>
<tu>
<tuv xml:lang="en-US"><seg>Example 1a Generating a random permutation</seg></tuv>
<tuv xml:lang="zh-CN"><seg>例1a产生-随机排列</seg></tuv>
</tu>
<tu>
<tuv xml:lang="en-US"><seg>Suppose we are interested in generating a permutation of the integers 1, 2, ..., n such that all n! possible orderings are equally likely. </seg></tuv>
<tuv xml:lang="zh-CN"><seg>假设我们想要产生整数1，2，...，n的一个排列，使得所有n！种排列都是等可能的。</seg></tuv>
</tu>
<tu>
<tuv xml:lang="en-US"><seg>Then, starting with any initial permutation, we will accomplish this after n - 1 steps, where we interchange the positions of two of the numbers of the permutation at each step. </seg></tuv>
<tuv xml:lang="zh-CN"><seg>从任一个初始排列开始，我们将通过n-1步得到最终结果，在每一步交换排列中两个数的位置。</seg></tuv>
</tu>
<tu>
<tuv xml:lang="en-US"><seg>Throughout, we will keep track of the permutation by letting X(i), i = 1, ..., n denote the number currently in position i. </seg></tuv>
<tuv xml:lang="zh-CN"><seg>在整个过程中，我们用X（i）表示在位置i上的数。</seg></tuv>
</tu>
<tu>
<tuv xml:lang="en-US"><seg>The algorithm operates as follows:</seg></tuv>
<tuv xml:lang="zh-CN"><seg>其算法如下:</seg></tuv>
</tu>
<tu>
<tuv xml:lang="en-US"><seg>Consider any arbitrary permutation, and let X(i) denote the element in position i, i = 1 ... , n. [For instance, we could take X(i) = i, i = 1, ..., n.]</seg></tuv>
<tuv xml:lang="zh-CN"><seg>1.考虑一个初始排列，X（i）表示在位置i上的对象，i=1，2，...，n。［例如，令X（i）=i，i=l，...，n。］</seg></tuv>
</tu>
<tu>
<tuv xml:lang="en-US"><seg>Generate a random variable Nn that is equally likely to equal any of the values 1, 2, ..., n.</seg></tuv>
<tuv xml:lang="zh-CN"><seg>2.产生一个随机变量Nn，Nn在数集｛1，2，...，n｝上均匀分布。</seg></tuv>
</tu>
<tu>
<tuv xml:lang="en-US"><seg>Interchange the values of X(Nn) and X(n). The value of X(n) will now remain fixed.</seg></tuv>
<tuv xml:lang="zh-CN"><seg>3.将X（Nn）与X（n）交换位置，交换以后，X（n）就是原来的X（Nn），并且将这个对象固定在位置。</seg></tuv>
</tu>
<tu>
<tuv xml:lang="en-US"><seg> [For instance, suppose that n = 4 and initially X(i) = i, i = 1, 2, 3, 4. If N4 = 3, then the new permutation is X(1) = 1, X(2) = 2, X(3) = 4, X(4) = 3, and element 3 will remain in position 4 throughout.]</seg></tuv>
<tuv xml:lang="zh-CN"><seg>［例如，n=4，初始状态X（i）=i，i=1，2，3，4，若N4=3，此时，新的排列成为X（l）=l，X（2）=2，X（3）=4，X（4）=3。而3这个对象此后不改位置，永远放在位置4上。］</seg></tuv>
</tu>
<tu>
<tuv xml:lang="en-US"><seg>Generate a random variable Nn-1 that is equally likely to be either 1, 2, ..., n - 1.</seg></tuv>
<tuv xml:lang="zh-CN"><seg>4.产生随机变量Nn-1，它在整数集｛1，2，...，n-1｝上均匀分布。</seg></tuv>
</tu>
<tu>
<tuv xml:lang="en-US"><seg>Interchange the values of X(Nn-1) and X(n - 1). </seg></tuv>
<tuv xml:lang="zh-CN"><seg>5.交换X（Nn-1）与X（n-l）的位置。</seg></tuv>
</tu>
<tu>
<tuv xml:lang="en-US"><seg>[If N3 = 1, then the new permutation is X(1) = 4, X(2) = 2, X(3) = 1, X(4) = 3.]</seg></tuv>
<tuv xml:lang="zh-CN"><seg>［若N3=l，则新的排列变成X（l）=4，X（2）=2，X（3）=l，X（4）=3。］</seg></tuv>
</tu>
<tu>
<tuv xml:lang="en-US"><seg>Generate Nn-2, which is equally likely to be either 1, 2, ... , n - 2.</seg></tuv>
<tuv xml:lang="zh-CN"><seg>6.产生随机变量Nn-2，它在｛1，2，...，n-2｝上均匀分布。</seg></tuv>
</tu>
<tu>
<tuv xml:lang="en-US"><seg>Interchange the values of X(Nn-2) and X(n - 2). </seg></tuv>
<tuv xml:lang="zh-CN"><seg>7.交换X（Nn-2）和X（n-2）的位置。</seg></tuv>
</tu>
<tu>
<tuv xml:lang="en-US"><seg>[If N2 = 1, then the new permutation is X(1) = 2, X(2) = 4, X(3) = 1, X(4) = 3, and this is the final permutation.]</seg></tuv>
<tuv xml:lang="zh-CN"><seg>［若N2=1，此时新的排列成为X（l）=2，X（2）=4，X（3）=l，X（4）=3。］</seg></tuv>
</tu>
<tu>
<tuv xml:lang="en-US"><seg>Generate Nn-3, and so on. The algorithm continues until N2 is generated, and after the next interchange the resulting permutation is the final one.</seg></tuv>
<tuv xml:lang="zh-CN"><seg>8.产生Nn-3，...，直到N2产生，然后交换X（N2）与X（2）的位置，得到最后的排列。</seg></tuv>
</tu>
<tu>
<tuv xml:lang="en-US"><seg>To implement this algorithm, it is necessary to be able to generate a random variable that is equally likely to be any of the values 1, 2, ... , k. </seg></tuv>
<tuv xml:lang="zh-CN"><seg>要实现这种算法需要产生在｛1，2，...，k｝上等可能地取值的随机变量。</seg></tuv>
</tu>
<tu>
<tuv xml:lang="en-US"><seg>To accomplish this, let U denote a random number-that is, U is uniformly distributed on (0, 1)-and note that kU is uniform on (0, k).</seg></tuv>
<tuv xml:lang="zh-CN"><seg>为此，令U是一个随机数，即U在（0，1）上均匀分布，注意到此时kU在区间（0，k）上均匀分布，</seg></tuv>
</tu>
<tu>
<tuv xml:lang="en-US"><seg>Hence, . . .</seg></tuv>
<tuv xml:lang="zh-CN"><seg>则. . .</seg></tuv>
</tu>
<tu>
<tuv xml:lang="en-US"><seg>so if we take Nk = [kU] + 1, where [x] is the integer part of x (that is, the largest integer less than or equal to x), then Nk will have the desired distribution.</seg></tuv>
<tuv xml:lang="zh-CN"><seg>取Nk=［kU］+1，其中记号［x］表示x的整数部分（即不大于的最大整数），则Nk就会在｛1，...，k｝上均匀分布。</seg></tuv>
</tu>
<tu>
<tuv xml:lang="en-US"><seg>The algorithm can now be succinctly written as follows:</seg></tuv>
<tuv xml:lang="zh-CN"><seg>这个算法可以简明地写成下列几步：</seg></tuv>
</tu>
<tu>
<tuv xml:lang="en-US"><seg>Step 1. </seg></tuv>
<tuv xml:lang="zh-CN"><seg>第1步</seg></tuv>
</tu>
<tu>
<tuv xml:lang="en-US"><seg>Let X(1), ... , X(n) be any permutation of 1, 2, ... , n. [For instance, we can set X(i) = i, i = 1, ... , n.]</seg></tuv>
<tuv xml:lang="zh-CN"><seg> 令X（l），...，X（n）为1，2，...，n的任意排列。［例如，X（i）=i，i=l，...，n。］</seg></tuv>
</tu>
<tu>
<tuv xml:lang="en-US"><seg>Step 2. </seg></tuv>
<tuv xml:lang="zh-CN"><seg>第2步 </seg></tuv>
</tu>
<tu>
<tuv xml:lang="en-US"><seg>Let I = n.</seg></tuv>
<tuv xml:lang="zh-CN"><seg>令I=n。</seg></tuv>
</tu>
<tu>
<tuv xml:lang="en-US"><seg>Step 3. </seg></tuv>
<tuv xml:lang="zh-CN"><seg>第3步 </seg></tuv>
</tu>
<tu>
<tuv xml:lang="en-US"><seg>Generate a random number U and set N = [IU] + 1.</seg></tuv>
<tuv xml:lang="zh-CN"><seg>产生一个随机数U，令N=［IU］+1。</seg></tuv>
</tu>
<tu>
<tuv xml:lang="en-US"><seg>Step 4. </seg></tuv>
<tuv xml:lang="zh-CN"><seg>第4步 </seg></tuv>
</tu>
<tu>
<tuv xml:lang="en-US"><seg>Interchange the values of X(N) and X(I).</seg></tuv>
<tuv xml:lang="zh-CN"><seg>交换X（N）与X（I）的位置。</seg></tuv>
</tu>
<tu>
<tuv xml:lang="en-US"><seg>Step 5. </seg></tuv>
<tuv xml:lang="zh-CN"><seg>第5步 </seg></tuv>
</tu>
<tu>
<tuv xml:lang="en-US"><seg>Reduce the value of I by 1, and if I &gt; 1, go to step 3.</seg></tuv>
<tuv xml:lang="zh-CN"><seg>将I的值减去1，如果I&gt;1，则转向第3步。</seg></tuv>
</tu>
<tu>
<tuv xml:lang="en-US"><seg>Step 6. </seg></tuv>
<tuv xml:lang="zh-CN"><seg>第6步 </seg></tuv>
</tu>
<tu>
<tuv xml:lang="en-US"><seg>X(1), ... , X(n) is the desired random generated permutation.</seg></tuv>
<tuv xml:lang="zh-CN"><seg>X（l），...，X（n）就是随机排列。</seg></tuv>
</tu>
<tu>
<tuv xml:lang="en-US"><seg>The foregoing algorithm for generating a random permutation is extremely useful. </seg></tuv>
<tuv xml:lang="zh-CN"><seg>上述产生随机排列的算法很有用。</seg></tuv>
</tu>
<tu>
<tuv xml:lang="en-US"><seg>For instance, suppose that a statistician is developing an experiment to compare the effects of m different treatments on a set of n subjects. </seg></tuv>
<tuv xml:lang="zh-CN"><seg>例如，假设一个统计学家想通过试验来比较对n个试验对象进行m种不同处理的效果。</seg></tuv>
</tu>
<tu>
<tuv xml:lang="en-US"><seg>He decides to split the subjects into m different groups of respective sizes n1, n2, ... , nm, where . . . = n, with the members of the ith group to receive treatment i. </seg></tuv>
<tuv xml:lang="zh-CN"><seg>他把试验对象分成容量分别为n1，n2，...，nm的m组，显然. . .=n，第i组试验对象接受第i种治疗。</seg></tuv>
</tu>
<tu>
<tuv xml:lang="en-US"><seg>To eliminate any bias in the assignment of subjects to treatments (for instance, it would cloud the meaning of the experimental results if it turned out that all the "best" subjects had been put in the same group), it is imperative that the assignment of a subject to a given group be done "at random." </seg></tuv>
<tuv xml:lang="zh-CN"><seg>为了消除任何分组偏差（例如，若把最好的个体放在同一组，就会将处理的效果和个体的“好坏”作用相混淆，造成偏差），我们必须将各个个体随机地分入各组。</seg></tuv>
</tu>
<tu>
<tuv xml:lang="en-US"><seg>How is this to be accomplished?</seg></tuv>
<tuv xml:lang="zh-CN"><seg>怎样做才能完成这个任务？ </seg></tuv>
</tu>
<tu>
<tuv xml:lang="en-US"><seg>A simple and efficient procedure is to arbitrarily number the subjects 1 through n and then generate a random permutation X(1), ... , X(n) of 1, 2, ... , n. Now assign subjects X(1), X(2), ... </seg></tuv>
<tuv xml:lang="zh-CN"><seg>一个简单而有效的方法是随意将试验对象由1到n进行编号，并产生一个1，2，...，n的随机排列X（l），...，X（n）。</seg></tuv>
</tu>
<tu>
<tuv xml:lang="en-US"><seg>, X(n1) to be in group 1; X(n1 + 1), ... , X(n1 + n2) to be in group 2; and, in general, group j is to consist of subjects numbered X(n1 + n2 + ... + nj-1 + k), k = 1, ...., nj.</seg></tuv>
<tuv xml:lang="zh-CN"><seg>将编号为X（l），...，X（n1）的对象归入第一组，将编号为X（n1+1），...，X（n1+n2）的对象编为第二组，一般地，将编号为X（n1+...+nj-1+k）（k=1，...，nj）的对象编为第j组，然后对第j组施行第j种处理。</seg></tuv>
</tu>
<tu>
<tuv xml:lang="en-US"><seg>10.2 General Techniques for Stimulating Continuous Random Variables </seg></tuv>
<tuv xml:lang="zh-CN"><seg>模拟连续型随机变量的一般方法</seg></tuv>
</tu>
<tu>
<tuv xml:lang="en-US"><seg>In this section, we present two general methods for using random numbers to simulate continuous random variables.</seg></tuv>
<tuv xml:lang="zh-CN"><seg>本节中，我们将要介绍两种利用随机数模拟连续型随机变量的一般方法。</seg></tuv>
</tu>
<tu>
<tuv xml:lang="en-US"><seg>The Inverse Transformation Method </seg></tuv>
<tuv xml:lang="zh-CN"><seg>逆变换方法</seg></tuv>
</tu>
<tu>
<tuv xml:lang="en-US"><seg>A general method for simulating a random variable having a continuous distribution-called the inverse transformation method-is based on the following proposition. </seg></tuv>
<tuv xml:lang="zh-CN"><seg>模拟连续型随机变量的一种一般方法称为逆变换方法，它是基于下列命题实现的。</seg></tuv>
</tu>
<tu>
<tuv xml:lang="en-US"><seg>Proposition 2.1 Let U be a uniform (0, 1) random variable. For any continuous distribution function F, if we define the random variable Y by </seg></tuv>
<tuv xml:lang="zh-CN"><seg>命题2.1 设U为（0，1）上均匀随机变量，如果定义随机变量则Y具有分布函数F，</seg></tuv>
</tu>
<tu>
<tuv xml:lang="en-US"><seg>then the random variable Y has distribution function F. </seg></tuv>
<tuv xml:lang="zh-CN"><seg>F为任意一个连续分布函数。</seg></tuv>
</tu>
<tu>
<tuv xml:lang="en-US"><seg>[F-1(x) is defined to equal that value y for which F(y) = x.]</seg></tuv>
<tuv xml:lang="zh-CN"><seg>[F-1（x）是方程F（y）=x的解。]</seg></tuv>
</tu>
<tu>
<tuv xml:lang="en-US"><seg>Proof</seg></tuv>
<tuv xml:lang="zh-CN"><seg>证明</seg></tuv>
</tu>
<tu>
<tuv xml:lang="en-US"><seg>Now, since F(x) is a monotone function, it follows that F-1(U) &lt;= a if and only if U &lt;= F(a). </seg></tuv>
<tuv xml:lang="zh-CN"><seg>因为F（x）是一个单调函数，所以F-1（U）&lt;= a成立的充要条件是U &lt;= F（a）。</seg></tuv>
</tu>
<tu>
<tuv xml:lang="en-US"><seg>Hence, from Equation (2.1), we have. . .</seg></tuv>
<tuv xml:lang="zh-CN"><seg>因此，由式（2.1）可得. . .</seg></tuv>
</tu>
<tu>
<tuv xml:lang="en-US"><seg>It follows from Proposition 2.1 that we can simulate a random variable X having a continuous distribution function F by generating a random number U and then setting X = F-1(U). </seg></tuv>
<tuv xml:lang="zh-CN"><seg>由命题2.1可知，我们可以通过产生一个随机数U并令X=F-1（U）来模拟具有连续分布函数F的随机变量X。</seg></tuv>
</tu>
<tu>
<tuv xml:lang="en-US"><seg>Example 2a Simulating an exponential random variable</seg></tuv>
<tuv xml:lang="zh-CN"><seg>例2a 模拟一个指数随机变量</seg></tuv>
</tu>
<tu>
<tuv xml:lang="en-US"><seg>If F(x) = 1 - e-x, then F-1(u) is that value of x such that. . .or . . .</seg></tuv>
<tuv xml:lang="zh-CN"><seg>设F（x）=1-e-x，则F-1（u）是下列方程的解x：. . .或. . .</seg></tuv>
</tu>
<tu>
<tuv xml:lang="en-US"><seg>Hence, if U is a uniform (0, 1) variable, then. . .is exponentially distributed with mean 1.</seg></tuv>
<tuv xml:lang="zh-CN"><seg>因此，若U为（0，1）均匀随机变量，则. . .的分布为指数分布，均值为1。</seg></tuv>
</tu>
<tu>
<tuv xml:lang="en-US"><seg>Since 1 - U is also uniformly distributed on (0, 1), it follows that -log U is exponential with mean 1. </seg></tuv>
<tuv xml:lang="zh-CN"><seg>因为（1—U）也是（0，1）均匀随机变量，所以-lnU也是指数随机变量，其均值为1。</seg></tuv>
</tu>
<tu>
<tuv xml:lang="en-US"><seg>Since cX is exponential with mean c when X is exponential with mean 1, it follows that -c log U is exponential with mean c.</seg></tuv>
<tuv xml:lang="zh-CN"><seg>若X具有指数分布，其均值为1，则cX具有指数分布，其均值为c。利用指数分布的这个特点知-clnU具有指数分布，均值为c。</seg></tuv>
</tu>
<tu>
<tuv xml:lang="en-US"><seg>The results of Example 2a can also be utilized to stimulate a gamma random variable.</seg></tuv>
<tuv xml:lang="zh-CN"><seg>例2a的结果也可以用来模拟. . .随机变量。</seg></tuv>
</tu>
<tu>
<tuv xml:lang="en-US"><seg>Example 2b Simulating a gamma (n, . . . random variable</seg></tuv>
<tuv xml:lang="zh-CN"><seg>例2b 模拟一个@（n，. . .）随机变量 </seg></tuv>
</tu>
<tu>
<tuv xml:lang="en-US"><seg>To simulate from a gamma distribution with parameters (n, . . .) when n is an integer, we use the fact that the sum of n independent exponential random variables, each having rate . . ., has this distribution. </seg></tuv>
<tuv xml:lang="zh-CN"><seg>为了模拟参数为（n，. . .）的@随机变量，其中n是整数，我们可以利用. . .随机变量与指数随机变量的关系，即n个独立同分布的参数为. . .的指数随机变量的和具有此分布。</seg></tuv>
</tu>
<tu>
<tuv xml:lang="en-US"><seg>Hence, if U1, ..., Un are independent uniform (0, 1) random variables, then . . .has the desired distribution.</seg></tuv>
<tuv xml:lang="zh-CN"><seg>因此，设U1，...，Un为独立同分布的（0，1）均匀随机变量，则 . . .具有. . .（n，. . .）分布。</seg></tuv>
</tu>
<tu>
<tuv xml:lang="en-US"><seg>The Rejection Method</seg></tuv>
<tuv xml:lang="zh-CN"><seg>舍取法</seg></tuv>
</tu>
<tu>
<tuv xml:lang="en-US"><seg>Suppose that we have a method for simulating a random variable having density function g(x). We can use this method as the basis for simulating from the continuous distribution having density f(x) by simulating Y from g and then accepting the simulated value with a probability proportional to f(Y)/g(Y).</seg></tuv>
<tuv xml:lang="zh-CN"><seg>假设我们有一种方法能够模拟密度函数为g（x）的随机变量，我们可以首先模拟一个密度函数为g的随机变量Y，然后以正比于f（Y）/g（Y）的概率采用Y的值，这样以Y为基础就能够模拟一个密度为f（x）的随机变量。</seg></tuv>
</tu>
<tu>
<tuv xml:lang="en-US"><seg>Specifically, let c be a constant such that. . .</seg></tuv>
<tuv xml:lang="zh-CN"><seg>具体来说，令c为一常数，满足. . .</seg></tuv>
</tu>
<tu>
<tuv xml:lang="en-US"><seg>We then have the following technique for simulating a random variable having density f.</seg></tuv>
<tuv xml:lang="zh-CN"><seg>然后采用下列方法模拟具有密度f的随机变量。</seg></tuv>
</tu>
<tu>
<tuv xml:lang="en-US"><seg>Rejection Method</seg></tuv>
<tuv xml:lang="zh-CN"><seg>舍取法</seg></tuv>
</tu>
<tu>
<tuv xml:lang="en-US"><seg>Step 1. Simulate Y having density g and simulate a random number U.</seg></tuv>
<tuv xml:lang="zh-CN"><seg>第1步 模拟具有密度g的Y，同时产生一随机数U。</seg></tuv>
</tu>
<tu>
<tuv xml:lang="en-US"><seg>Step 2. If U &lt;=  f(Y)/cg(Y), set X = Y. Otherwise return to step 1.</seg></tuv>
<tuv xml:lang="zh-CN"><seg>第2步 若U &lt;= f（Y）/[cg（Y）]，则X=Y，否则回到第一步。</seg></tuv>
</tu>
<tu>
<tuv xml:lang="en-US"><seg>The rejection method is expressed pictorially in Figure 10.1. </seg></tuv>
<tuv xml:lang="zh-CN"><seg>舍取法模拟流程见图10-1。</seg></tuv>
</tu>
<tu>
<tuv xml:lang="en-US"><seg>We now prove that it works.</seg></tuv>
<tuv xml:lang="zh-CN"><seg>下面我们要证明舍取法的可行性。</seg></tuv>
</tu>
<tu>
<tuv xml:lang="en-US"><seg>Proposition 2.2</seg></tuv>
<tuv xml:lang="zh-CN"><seg>命题2.2 </seg></tuv>
</tu>
<tu>
<tuv xml:lang="en-US"><seg>The random variable X generated by the rejection method has density function f.</seg></tuv>
<tuv xml:lang="zh-CN"><seg>由上述舍取法产生的随机变量具有密度函数f</seg></tuv>
</tu>
<tu>
<tuv xml:lang="en-US"><seg>Proof Let X be the value obtained and let N denote the number of necessary iterations. Then</seg></tuv>
<tuv xml:lang="zh-CN"><seg>证明设X为由舍取法产生的随机变量，记N为舍取法中循环的次数，则</seg></tuv>
</tu>
<tu>
<tuv xml:lang="en-US"><seg>where K = P{U &lt;=  f(Y)/cg(Y)}. </seg></tuv>
<tuv xml:lang="zh-CN"><seg>其中K=P｛（U &lt;= f（Y）/[cg（Y）]｝。</seg></tuv>
</tu>
<tu>
<tuv xml:lang="en-US"><seg>Now, by independence, the joint density function of Y and U is . . .</seg></tuv>
<tuv xml:lang="zh-CN"><seg>因为Y与U相互独立，所以Y与U的联合密度由下式给出：. . .</seg></tuv>
</tu>
<tu>
<tuv xml:lang="en-US"><seg>so, using the foregoing, we have. . .</seg></tuv>
<tuv xml:lang="zh-CN"><seg>利用上述结论，可得. . .</seg></tuv>
</tu>
<tu>
<tuv xml:lang="en-US"><seg>Letting X approach . . . and using the fact that f is a density gives. . .</seg></tuv>
<tuv xml:lang="zh-CN"><seg>由于f（y）为密度函数，上式两边令. . .，得 . . .</seg></tuv>
</tu>
<tu>
<tuv xml:lang="en-US"><seg>Hence, from Equation (2.2), we obtain. . .</seg></tuv>
<tuv xml:lang="zh-CN"><seg>因此，由式（2.2）可得. . .</seg></tuv>
</tu>
<tu>
<tuv xml:lang="en-US"><seg>which completes the proof.</seg></tuv>
<tuv xml:lang="zh-CN"><seg>命题得证。</seg></tuv>
</tu>
<tu>
<tuv xml:lang="en-US"><seg>Remarks (a) Note that the way in which we "accept the value Y with probability f(Y)/cg(Y)" is by generating a random number U and then accepting Y if U &lt;=  f(Y)/cg(Y).</seg></tuv>
<tuv xml:lang="zh-CN"><seg>注释（a）注意，前面提到“以概率f（Y）/[cg（Y）]接受Y”是指产生一个随机数U，若U &lt;= f（Y）/[cg（Y）]，则令X=Y。</seg></tuv>
</tu>
<tu>
<tuv xml:lang="en-US"><seg>(b)Since each iteration will independently result in an accepted value with probability P{U &lt;=  f(Y)/cg(Y)} = K = 1/c, it follows that the number of iterations has a geometric distribution with mean c.</seg></tuv>
<tuv xml:lang="zh-CN"><seg>（b）在产生随机数的过程中，每次循环独立地接受Y的概率为P｛U &lt;= f（Y）/[cg（Y）]｝=K=l/c。由此可知，循环次数N具有以c为均值的几何分布。</seg></tuv>
</tu>
<tu>
<tuv xml:lang="en-US"><seg>Example 2c Simulating a normal random variable</seg></tuv>
<tuv xml:lang="zh-CN"><seg>例2c 模拟正态随机变量</seg></tuv>
</tu>
<tu>
<tuv xml:lang="en-US"><seg>To simulate a unit normal random variable Z (that is, one with mean 0 and variance 1), note first that the absolute value of Z has probability density function</seg></tuv>
<tuv xml:lang="zh-CN"><seg>模拟一个标准正态随机变量Z（即均值为0，方差为1的正态分布），首先注意到X=|Z|具有密度函数</seg></tuv>
</tu>
</body>
</tmx>