<?xml version="1.0" encoding="utf-8"?>
<tmx version="1.4">
<header creationtool="Olifant" creationtoolversion="3.0.8.0" datatype="plaintext" segtype="sentence" adminlang="en-US" srclang="EN-US" o-tmf="ATM" changedate="20200921T085110Z" changeid="Think">
</header>
<body>
<tu>
<tuv xml:lang="EN-US">
<seg>3 THE DATA LINK LAYER</seg>
</tuv>
<tuv xml:lang="ZH-CN">
<seg>第3章 数据链路层</seg>
</tuv>
</tu>
<tu>
<tuv xml:lang="EN-US">
<seg>In this chapter we will study the design principles for the second layer in our model, the data link layer. </seg>
</tuv>
<tuv xml:lang="ZH-CN">
<seg>在本章，我们将学习网络模型中的第二层（即数据链路层）的设计原则。</seg>
</tuv>
</tu>
<tu>
<tuv xml:lang="EN-US">
<seg>This study deals with algorithms for achieving reliable, efficient communication of whole units of information called frames (rather than individual bits, as in the physical layer) between two adjacent machines. </seg>
</tuv>
<tuv xml:lang="ZH-CN">
<seg>学习内容涉及两台相邻机器实现可靠有效的完整信息块（称为帧）通信的一些算法，而不像物理层那样只关注单个比特传输。</seg>
</tuv>
</tu>
<tu>
<tuv xml:lang="EN-US">
<seg>By adjacent, we mean that the two machines are connected by a communication channel that acts conceptually like a wire (e.g., a coaxial cable, telephone line, or wireless channel). </seg>
</tuv>
<tuv xml:lang="ZH-CN">
<seg>这里的相邻指两台机器通过一条通信信道连接起来，通信信道在概念上就像一条线路（比如同轴电缆、电话线或者无线信道）。</seg>
</tuv>
</tu>
<tu>
<tuv xml:lang="EN-US">
<seg>The essential property of a channel that makes it “wire-like” is that the bits are delivered in exactly the same order in which they are sent.</seg>
</tuv>
<tuv xml:lang="ZH-CN">
<seg>信道像一条线路的本质特性使得信道上传递的比特顺序与发送顺序完全相同。</seg>
</tuv>
</tu>
<tu>
<tuv xml:lang="EN-US">
<seg>At first you might think this problem is so trivial that there is nothing to study--machine A just puts the bits on the wire, and machine B just takes them off. </seg>
</tuv>
<tuv xml:lang="ZH-CN">
<seg>刚开始，你可能认为这个问题非常简单，似乎没有什么内容需要学习——机器A把比特放到线路上，然后机器B将这些比特取下来。</seg>
</tuv>
</tu>
<tu>
<tuv xml:lang="EN-US">
<seg>Unfortunately, communication channels make errors occasionally. </seg>
</tuv>
<tuv xml:lang="ZH-CN">
<seg>不幸的是，通信线路偶尔会出错。</seg>
</tuv>
</tu>
<tu>
<tuv xml:lang="EN-US">
<seg>Furthermore, they have only a finite data rate, and there is a nonzero propagation delay between the time a bit is sent and the time it is received. </seg>
</tuv>
<tuv xml:lang="ZH-CN">
<seg>而且，它们只有有限的数据传输率，并且在比特的发送时间和接收时间之间存在一个非零延迟。</seg>
</tuv>
</tu>
<tu>
<tuv xml:lang="EN-US">
<seg>These limitations have important implications for the efficiency of the data transfer. </seg>
</tuv>
<tuv xml:lang="ZH-CN">
<seg>这些限制对数据传输的效率有非常重要的影响。</seg>
</tuv>
</tu>
<tu>
<tuv xml:lang="EN-US">
<seg>The protocols used for communications must take all these factors into consideration. </seg>
</tuv>
<tuv xml:lang="ZH-CN">
<seg>通信所采用的协议必须考虑所有这些因素。</seg>
</tuv>
</tu>
<tu>
<tuv xml:lang="EN-US">
<seg>These protocols are the subject of this chapter.</seg>
</tuv>
<tuv xml:lang="ZH-CN">
<seg>这些协议正是本章的主题。</seg>
</tuv>
</tu>
<tu>
<tuv xml:lang="EN-US">
<seg>After an introduction to the key design issues present in the data link layer, we will start our study of its protocols by looking at the nature of errors and how they can be detected and corrected. </seg>
</tuv>
<tuv xml:lang="ZH-CN">
<seg>在介绍了数据链路层的关键设计问题之后，我们将通过考察错误的本质以及如何检测和纠正这些错误来开始数据链路层协议的学习。</seg>
</tuv>
</tu>
<tu>
<tuv xml:lang="EN-US">
<seg>Then we will study a series of increasingly complex protocols, each one solving more and more of the problems present in this layer. </seg>
</tuv>
<tuv xml:lang="ZH-CN">
<seg>然后，我们将学习一系列复杂性逐步递增的协议，每个协议解决了本层中越来越多的问题。</seg>
</tuv>
</tu>
<tu>
<tuv xml:lang="EN-US">
<seg>Finally, we will conclude with some examples of data link protocols.</seg>
</tuv>
<tuv xml:lang="ZH-CN">
<seg>最后，我们将给出一些数据链路层协议的例子来结束本章。</seg>
</tuv>
</tu>
<tu>
<tuv xml:lang="EN-US">
<seg>3.1 DATA LINK LAYER DESIGN ISSUES</seg>
</tuv>
<tuv xml:lang="ZH-CN">
<seg>3.1 数据链路层的设计问题</seg>
</tuv>
</tu>
<tu>
<tuv xml:lang="EN-US">
<seg>The data link layer uses the services of the physical layer to send and receive bits over communication channels. </seg>
</tuv>
<tuv xml:lang="ZH-CN">
<seg>数据链路层使用物理层提供的服务在通信信道上发送和接收比特。</seg>
</tuv>
</tu>
<tu>
<tuv xml:lang="EN-US">
<seg>It has a number of functions, including:</seg>
</tuv>
<tuv xml:lang="ZH-CN">
<seg>它要完成一些功能，包括：</seg>
</tuv>
</tu>
<tu>
<tuv xml:lang="EN-US">
<seg>Providing a well-defined service interface to the network layer.</seg>
</tuv>
<tuv xml:lang="ZH-CN">
<seg>（1）向网络层提供一个定义良好的服务接口。</seg>
</tuv>
</tu>
<tu>
<tuv xml:lang="EN-US">
<seg>Dealing with transmission errors.</seg>
</tuv>
<tuv xml:lang="ZH-CN">
<seg>（2）处理传输错误。</seg>
</tuv>
</tu>
<tu>
<tuv xml:lang="EN-US">
<seg>Regulating the flow of data so that slow receivers are not swamped by fast senders.</seg>
</tuv>
<tuv xml:lang="ZH-CN">
<seg>（3）调节数据流，确保慢速的接收方不会被快速的发送方淹没。</seg>
</tuv>
</tu>
<tu>
<tuv xml:lang="EN-US">
<seg>To accomplish these goals, the data link layer takes the packets it gets from the network layer and encapsulates them into frames for transmission. </seg>
</tuv>
<tuv xml:lang="ZH-CN">
<seg>为了实现这些目标，数据链路层从网络层获得数据包，然后将这些数据包封装成帧（frame）以便传输。</seg>
</tuv>
</tu>
<tu>
<tuv xml:lang="EN-US">
<seg>Each frame contains a frame header, a payload field for holding the packet, and a frame trailer, as illustrated in Fig. 3-1. </seg>
</tuv>
<tuv xml:lang="ZH-CN">
<seg>每个帧包含一个帧头、一个有效载荷（用于存放数据包）以及一个帧尾，如图3-1所示。</seg>
</tuv>
</tu>
<tu>
<tuv xml:lang="EN-US">
<seg>Frame management forms the heart of what the data link layer does. </seg>
</tuv>
<tuv xml:lang="ZH-CN">
<seg>帧的管理构成了数据链路层工作的核心。</seg>
</tuv>
</tu>
<tu>
<tuv xml:lang="EN-US">
<seg>In the following sections we will examine all the above-mentioned issues in detail.</seg>
</tuv>
<tuv xml:lang="ZH-CN">
<seg>在后面的章节中，我们将详细地讨论上面提到的这些问题。</seg>
</tuv>
</tu>
<tu>
<tuv xml:lang="EN-US">
<seg>Figure 3-1. Relationship between packets and frames.</seg>
</tuv>
<tuv xml:lang="ZH-CN">
<seg>图3-1数据包和帧的关系</seg>
</tuv>
</tu>
<tu>
<tuv xml:lang="EN-US">
<seg>Although this chapter is explicitly about the data link layer and its protocols, many of the principles we will study here, such as error control and flow control, are found in transport and other protocols as well. </seg>
</tuv>
<tuv xml:lang="ZH-CN">
<seg>虽然本章明确讨论数据链路层及其协议，但是，我们在本章中学习的许多原理，比如错误控制和流量控制等同样可以在传输层和其他协议中寻觅到类似的踪迹。</seg>
</tuv>
</tu>
<tu>
<tuv xml:lang="EN-US">
<seg>That is because reliability is an overall goal, and it is achieved when all the layers work together. </seg>
</tuv>
<tuv xml:lang="ZH-CN">
<seg>这是因为可靠性是网络的总目标，这个目标的实现需要各层次的紧密配合。</seg>
</tuv>
</tu>
<tu>
<tuv xml:lang="EN-US">
<seg>In fact, in many networks, these functions are found mostly in the upper layers, with the data link layer doing the minimal job that is “good enough.” </seg>
</tuv>
<tuv xml:lang="ZH-CN">
<seg>实际上，在许多网络中，这些功能最常出现的地方是上层，数据链路层只要做很少的一点工作就已经“足够好”。</seg>
</tuv>
</tu>
<tu>
<tuv xml:lang="EN-US">
<seg>However, no matter where they are found, the principles are pretty much the same. </seg>
</tuv>
<tuv xml:lang="ZH-CN">
<seg>然而，不管它们出现在哪里，原理是非常一致的。</seg>
</tuv>
</tu>
<tu>
<tuv xml:lang="EN-US">
<seg>They often show up in their simplest and purest forms in the data link layer, making this a good place to examine them in detail.</seg>
</tuv>
<tuv xml:lang="ZH-CN">
<seg>在数据链路层中，它们通常表现出最为简单和纯粹的形式，因此，数据链路层是详细学习这些原理的绝佳之地。</seg>
</tuv>
</tu>
<tu>
<tuv xml:lang="EN-US">
<seg>3.1.1 Services Provided to the Network Layer </seg>
</tuv>
<tuv xml:lang="ZH-CN">
<seg>3.1.1 提供给网络层的服务</seg>
</tuv>
</tu>
<tu>
<tuv xml:lang="EN-US">
<seg>The function of the data link layer is to provide services to the network layer. </seg>
</tuv>
<tuv xml:lang="ZH-CN">
<seg>数据链路层的功能是为网络层提供服务。</seg>
</tuv>
</tu>
<tu>
<tuv xml:lang="EN-US">
<seg>The principal service is transferring data from the network layer on the source machine to the network layer on the destination machine. </seg>
</tuv>
<tuv xml:lang="ZH-CN">
<seg>最主要的服务是将数据从源机器的网络层传输到目标机器的网络层。</seg>
</tuv>
</tu>
<tu>
<tuv xml:lang="EN-US">
<seg>On the source machine is an entity, call it a process, in the network layer that hands some bits to the data link layer for transmission to the destination. </seg>
</tuv>
<tuv xml:lang="ZH-CN">
<seg>在源机器的网络层有一个实体（称为进程），它将一些比特交给数据链路层，要求传输到目标机器。</seg>
</tuv>
</tu>
<tu>
<tuv xml:lang="EN-US">
<seg>The job of the data link layer is to transmit the bits to the destination machine so they can be handed over to the network layer there, as shown in Fig. 3-2(a). </seg>
</tuv>
<tuv xml:lang="ZH-CN">
<seg>数据链路层的任务就是将这些比特传输给目标机器，然后再进一步交付给网络层，如图3-2（a）所示。</seg>
</tuv>
</tu>
<tu>
<tuv xml:lang="EN-US">
<seg>The actual transmission follows the path of Fig. 3-2(b), but it is easier to think in terms of two data link layer processes communicating using a data link protocol. </seg>
</tuv>
<tuv xml:lang="ZH-CN">
<seg>实际的传输过程则是沿着图3-2（b）所示 的路径进行的，但很容易将这个过程想象成两个数据链路层的进程使用一个数据链路协议进行通信。</seg>
</tuv>
</tu>
<tu>
<tuv xml:lang="EN-US">
<seg>For this reason, we will implicitly use the model of Fig. 3-2(a) throughout this chapter.</seg>
</tuv>
<tuv xml:lang="ZH-CN">
<seg>基于这个原因，在本章中我们将隐式使用图3-2（a）的模型。</seg>
</tuv>
</tu>
<tu>
<tuv xml:lang="EN-US">
<seg>Figure 3-2. (a) Virtual communication. (b) Actual communication. </seg>
</tuv>
<tuv xml:lang="ZH-CN">
<seg>图 3-2（a）虚拟通信；（b）实际通信</seg>
</tuv>
</tu>
<tu>
<tuv xml:lang="EN-US">
<seg>The data link layer can be designed to offer various services. </seg>
</tuv>
<tuv xml:lang="ZH-CN">
<seg>数据链路层可以设计成向上提供各种不同的服务。</seg>
</tuv>
</tu>
<tu>
<tuv xml:lang="EN-US">
<seg>The actual services that are offered vary from protocol to protocol. </seg>
</tuv>
<tuv xml:lang="ZH-CN">
<seg>实际提供的服务因具体协议的不同而有所差异。</seg>
</tuv>
</tu>
<tu>
<tuv xml:lang="EN-US">
<seg>Three reasonable possibilities that we will consider in turn are:</seg>
</tuv>
<tuv xml:lang="ZH-CN">
<seg>一般情况下，数据链路层通常会提供以下3种可能的服务：</seg>
</tuv>
</tu>
<tu>
<tuv xml:lang="EN-US">
<seg>Unacknowledged connectionless service.</seg>
</tuv>
<tuv xml:lang="ZH-CN">
<seg>（1）无确认的无连接服务。</seg>
</tuv>
</tu>
<tu>
<tuv xml:lang="EN-US">
<seg>Acknowledged connectionless service.</seg>
</tuv>
<tuv xml:lang="ZH-CN">
<seg>（2）有确认的无连接服务。</seg>
</tuv>
</tu>
<tu>
<tuv xml:lang="EN-US">
<seg>Acknowledged connection-oriented service.</seg>
</tuv>
<tuv xml:lang="ZH-CN">
<seg>（3）有确认的有连接服务。</seg>
</tuv>
</tu>
<tu>
<tuv xml:lang="EN-US">
<seg>Unacknowledged connectionless service consists of having the source machine send independent frames to the destination machine without having the destination machine acknowledge them. </seg>
</tuv>
<tuv xml:lang="ZH-CN">
<seg>无确认的无连接服务是指源机器向目标机器发送独立的帧，目标机器并不对这些帧进行确认。</seg>
</tuv>
</tu>
<tu>
<tuv xml:lang="EN-US">
<seg>Ethernet is a good example of a data link layer that provides this class of service. </seg>
</tuv>
<tuv xml:lang="ZH-CN">
<seg>以太网就是一个提供此类服务的数据链路层极好实例。</seg>
</tuv>
</tu>
<tu>
<tuv xml:lang="EN-US">
<seg>No logical connection is established beforehand or released afterward. </seg>
</tuv>
<tuv xml:lang="ZH-CN">
<seg>采用这种服务，事先不需要建立逻辑连接，事后也不用释放逻辑连接。</seg>
</tuv>
</tu>
<tu>
<tuv xml:lang="EN-US">
<seg>If a frame is lost due to noise on the line, no attempt is made to detect the loss or recover from it in the data link layer. </seg>
</tuv>
<tuv xml:lang="ZH-CN">
<seg>若由于线路的噪声而造成了某一帧的丢失，数据链路层并不试图去检测这样的丢帧情况，更不会去试图恢复丢失的帧。</seg>
</tuv>
</tu>
<tu>
<tuv xml:lang="EN-US">
<seg>This class of service is appropriate when the error rate is very low, so recovery is left to higher layers.</seg>
</tuv>
<tuv xml:lang="ZH-CN">
<seg>这类服务合适两种场合，第一种是错误率很低的场合，此时差错恢复过程可以留给上层来完成；</seg>
</tuv>
</tu>
<tu>
<tuv xml:lang="EN-US">
<seg> It is also appropriate for real-time traffic, such as voice, in which late data are worse than bad data.</seg>
</tuv>
<tuv xml:lang="ZH-CN">
<seg>第二种是实时通信，比如语音传输，因为在实时通信中数据迟到比数据受损更糟糕。</seg>
</tuv>
</tu>
<tu>
<tuv xml:lang="EN-US">
<seg>The next step up in terms of reliability is acknowledged connectionless service. </seg>
</tuv>
<tuv xml:lang="ZH-CN">
<seg>迈向可靠性的下一步是有确认的无连接服务。</seg>
</tuv>
</tu>
<tu>
<tuv xml:lang="EN-US">
<seg>When this service is offered, there are still no logical connections used, but each frame sent is individually acknowledged. </seg>
</tuv>
<tuv xml:lang="ZH-CN">
<seg>当向网络层提供这种服务时，数据链路层仍然没有使用逻辑连接，但其发送的每一帧都需要单独确认。</seg>
</tuv>
</tu>
<tu>
<tuv xml:lang="EN-US">
<seg>In this way, the sender knows whether a frame has arrived correctly or been lost. </seg>
</tuv>
<tuv xml:lang="ZH-CN">
<seg>这样，发送方可知道一个帧是否已经正确地到达目的地。</seg>
</tuv>
</tu>
<tu>
<tuv xml:lang="EN-US">
<seg>If it has not arrived within a specified time interval, it can be sent again. </seg>
</tuv>
<tuv xml:lang="ZH-CN">
<seg>如果一个帧在指定的时间间隔内还没有到达，则发送方将再次发送该帧。</seg>
</tuv>
</tu>
<tu>
<tuv xml:lang="EN-US">
<seg>This service is useful over unreliable channels, such as wireless systems. 802.11 (WiFi) is a good example of this class of service.</seg>
</tuv>
<tuv xml:lang="ZH-CN">
<seg>这类服务尤其适用于不可靠的信道，比如无线系统。802.11（WiFi）就是此类服务的一个很好例子。</seg>
</tuv>
</tu>
<tu>
<tuv xml:lang="EN-US">
<seg>It is perhaps worth emphasizing that providing acknowledgements in the data link layer is just an optimization, never a requirement. </seg>
</tuv>
<tuv xml:lang="ZH-CN">
<seg>或许有一点值得强调，那就是在数据链路层提供确认只是一种优化手段，永远不应该成为一种需求。</seg>
</tuv>
</tu>
<tu>
<tuv xml:lang="EN-US">
<seg>The network layer can always send a packet and wait for it to be acknowledged by its peer on the remote machine. </seg>
</tuv>
<tuv xml:lang="ZH-CN">
<seg>网络层总是可以发送一个数据包，然后等待该数据包被确认。</seg>
</tuv>
</tu>
<tu>
<tuv xml:lang="EN-US">
<seg>If the acknowledgement is not forthcoming before the timer expires, the sender can just send the entire message again. </seg>
</tuv>
<tuv xml:lang="ZH-CN">
<seg>如果在计时器超时之前，该数据包的确认还没有到来，那么发送方只要再次发送整个报文即可。</seg>
</tuv>
</tu>
<tu>
<tuv xml:lang="EN-US">
<seg>The trouble with this strategy is that it can be inefficient. </seg>
</tuv>
<tuv xml:lang="ZH-CN">
<seg>这一策略的麻烦在于它可能导致传输的低效率。</seg>
</tuv>
</tu>
<tu>
<tuv xml:lang="EN-US">
<seg>Links usually have a strict maximum frame length imposed by the hardware, and known propagation delays. </seg>
</tuv>
<tuv xml:lang="ZH-CN">
<seg>链路层对帧通常有严格的长度限制，这是由硬件所决定的；除此之外，还有传播延迟。</seg>
</tuv>
</tu>
<tu>
<tuv xml:lang="EN-US">
<seg>The network layer does not know these parameters. </seg>
</tuv>
<tuv xml:lang="ZH-CN">
<seg>但网络层并不清楚这些参数。</seg>
</tuv>
</tu>
<tu>
<tuv xml:lang="EN-US">
<seg>It might send a large packet that is broken up into, say, 10 frames, of which 2 are lost on average. It would then take a very long time for the packet to get through. </seg>
</tuv>
<tuv xml:lang="ZH-CN">
<seg>网络层可能发出了一个很大的数据包，该数据包被拆分并封装到（比如说）10个帧中，而且20%的帧在传输中被丢失，那么这个数据每可能需要花很长的时间才能传到接收方。</seg>
</tuv>
</tu>
<tu>
<tuv xml:lang="EN-US">
<seg>Instead, if individual frames are acknowledged and retransmitted, then errors can be corrected more directly and more quickly. </seg>
</tuv>
<tuv xml:lang="ZH-CN">
<seg>相反地，如果每个帧都单独确认和必要时重传，那么出现的差错就能更直接并且更快地被检测到。</seg>
</tuv>
</tu>
<tu>
<tuv xml:lang="EN-US">
<seg>On reliable channels, such as fiber, the overhead of a heavyweight data link protocol may be unnecessary, but on (inherently unreliable) wireless channels it is well worth the cost.</seg>
</tuv>
<tuv xml:lang="ZH-CN">
<seg>在可靠信道上，比如光纤，重量级数据链路协议的开销可能是不必要的；但在无线信道上，由于信道内在的不可靠性，这种开销还是非常值得的。</seg>
</tuv>
</tu>
<tu>
<tuv xml:lang="EN-US">
<seg>Getting back to our services, the most sophisticated service the data link layer can provide to the network layer is connection-oriented service. </seg>
</tuv>
<tuv xml:lang="ZH-CN">
<seg>我们再回到有关服务的话题上，数据链路层向网络层提供的最复杂服务是面向连接的服务。</seg>
</tuv>
</tu>
<tu>
<tuv xml:lang="EN-US">
<seg>With this service, the source and destination machines establish a connection before any data are transferred. </seg>
</tuv>
<tuv xml:lang="ZH-CN">
<seg>采用这种服务，源机器和目标机器在传输任何数据之前要建立一个连接。</seg>
</tuv>
</tu>
<tu>
<tuv xml:lang="EN-US">
<seg>Each frame sent over the connection is numbered, and the data link layer guarantees that each frame sent is indeed received. </seg>
</tuv>
<tuv xml:lang="ZH-CN">
<seg>连接上发送的每一帧都被编号，数据链路层确保发出的每个帧都会真正被接收方收到。</seg>
</tuv>
</tu>
<tu>
<tuv xml:lang="EN-US">
<seg>Furthermore, it guarantees that each frame is received exactly once and that all frames are received in the right order. </seg>
</tuv>
<tuv xml:lang="ZH-CN">
<seg>它还保证每个帧只被接收一次，并且所有的帧都将按正确的顺序被接收。</seg>
</tuv>
</tu>
<tu>
<tuv xml:lang="EN-US">
<seg>Connection-oriented service thus provides the network layer processes with the equivalent of a reliable bit stream. </seg>
</tuv>
<tuv xml:lang="ZH-CN">
<seg>因此，面向连接的服务相当于为网络层进程提供了一个可靠的比特流。</seg>
</tuv>
</tu>
<tu>
<tuv xml:lang="EN-US">
<seg>It is appropriate over long, unreliable links such as a satellite channel or a long-distance telephone circuit. </seg>
</tuv>
<tuv xml:lang="ZH-CN">
<seg>它适用于长距离且不可靠的链路，比如卫星信道或者长途电话电路。</seg>
</tuv>
</tu>
<tu>
<tuv xml:lang="EN-US">
<seg>If acknowledged connectionless service were used, it is conceivable that lost acknowledgements could cause a frame to be sent and received several times, wasting bandwidth.</seg>
</tuv>
<tuv xml:lang="ZH-CN">
<seg>如果采用有确认的无连接服务，可以想象丢失了确认可能导致一个帧被收发多次，因而将浪费带宽。</seg>
</tuv>
</tu>
<tu>
<tuv xml:lang="EN-US">
<seg>When connection-oriented service is used, transfers go through three distinct phases. </seg>
</tuv>
<tuv xml:lang="ZH-CN">
<seg>当使用面向连接的服务时，数据传输必须经过三个不同的阶段。</seg>
</tuv>
</tu>
<tu>
<tuv xml:lang="EN-US">
<seg>In the first phase, the connection is established by having both sides initialize variables and counters needed to keep track of which frames have been received and which ones have not. </seg>
</tuv>
<tuv xml:lang="ZH-CN">
<seg>在第一个阶段，要建立连接，双方初始化各种变量和计数器，这些变量和计数器记录了哪些帧已经接收到，哪些帧还没有收到。</seg>
</tuv>
</tu>
<tu>
<tuv xml:lang="EN-US">
<seg>In the second phase, one or more frames are actually transmitted. </seg>
</tuv>
<tuv xml:lang="ZH-CN">
<seg>在第二个阶段，才真正传输一个或者多个数据帧。</seg>
</tuv>
</tu>
<tu>
<tuv xml:lang="EN-US">
<seg>In the third and final phase, the connection is released, freeing up the variables, buffers, and other resources used to maintain the connection.</seg>
</tuv>
<tuv xml:lang="ZH-CN">
<seg>在第三个也是最后一个阶段中，连接被释放，所有的变量、缓冲区以及其他用于维护该连接的资源也随之被释放。</seg>
</tuv>
</tu>
<tu>
<tuv xml:lang="EN-US">
<seg>Framing </seg>
</tuv>
<tuv xml:lang="ZH-CN">
<seg>3.1.2 成帧</seg>
</tuv>
</tu>
<tu>
<tuv xml:lang="EN-US">
<seg>To provide service to the network layer, the data link layer must use the service provided to it by the physical layer. </seg>
</tuv>
<tuv xml:lang="ZH-CN">
<seg>为了向网络层提供服务，数据链路层必须使用物理层提供给它的服务。</seg>
</tuv>
</tu>
<tu>
<tuv xml:lang="EN-US">
<seg>What the physical layer does is accept a raw bit stream and attempt to deliver it to the destination. </seg>
</tuv>
<tuv xml:lang="ZH-CN">
<seg>物理层所做的只是接收一个原始比特流，并试图将它传递给目标机器。</seg>
</tuv>
</tu>
<tu>
<tuv xml:lang="EN-US">
<seg>If the channel is noisy, as it is for most wireless and some wired links, the physical layer will add some redundancy to its signals to reduce the bit error rate to a tolerable level. </seg>
</tuv>
<tuv xml:lang="ZH-CN">
<seg>如果信道上存在噪声，就像大多数无线链路和某些有线链路那样，物理层就会在它的信号中添加某种冗余，以便将误码率降到一定程度。</seg>
</tuv>
</tu>
<tu>
<tuv xml:lang="EN-US">
<seg>However, the bit stream received by the data link layer is not guaranteed to be error free. </seg>
</tuv>
<tuv xml:lang="ZH-CN">
<seg>然而，数据链路层接收到的比特流不能保证没有错误。</seg>
</tuv>
</tu>
<tu>
<tuv xml:lang="EN-US">
<seg>Some bits may have different values and the number of bits received may be less than, equal to, or more than the number of bits transmitted. </seg>
</tuv>
<tuv xml:lang="ZH-CN">
<seg>某些比特的值可能已经发生变化，接收到的比特个数可能少于、等于或者多于发送的比特数量。</seg>
</tuv>
</tu>
<tu>
<tuv xml:lang="EN-US">
<seg>It is up to the data link layer to detect and, if necessary, correct errors.</seg>
</tuv>
<tuv xml:lang="ZH-CN">
<seg>检测错误和纠正错误（有必要的话）的工作正是数据链路层该做的。</seg>
</tuv>
</tu>
<tu>
<tuv xml:lang="EN-US">
<seg>The usual approach is for the data link layer to break up the bit stream into discrete frames, compute a short token called a checksum for each frame, and include the checksum in the frame when it is transmitted. (Checksum algorithms will be discussed later in this chapter.)</seg>
</tuv>
<tuv xml:lang="ZH-CN">
<seg>对于数据链路层来说，通常的做法是将比特流拆分成多个离散的帧，为每个帧计算一个称为校验和的短令牌（本章后面将讨论校验和算法），并将该校验和放在帧中一起传输。</seg>
</tuv>
</tu>
<tu>
<tuv xml:lang="EN-US">
<seg>When a frame arrives at the destination, the checksum is recomputed. </seg>
</tuv>
<tuv xml:lang="ZH-CN">
<seg> 当帧到达目标机器时，要重新计算该帧的校验和。</seg>
</tuv>
</tu>
<tu>
<tuv xml:lang="EN-US">
<seg>If the newly computed checksum is different from the one contained in the frame, the data link layer knows that an error has occurred and takes steps to deal with it (e.g., discarding the bad frame and possibly also sending back an error report).</seg>
</tuv>
<tuv xml:lang="ZH-CN">
<seg>如果新算出来的校验和与该帧中包含的校验和不同，则数据链路层知道传输过程中产生了错误，它就会采取措施来处理错误（比如丢掉坏帧，可能还会发回一个错误报告）。</seg>
</tuv>
</tu>
<tu>
<tuv xml:lang="EN-US">
<seg>Breaking up the bit stream into frames is more difficult than it at first appears. </seg>
</tuv>
<tuv xml:lang="ZH-CN">
<seg>拆分比特流的实际工作比初看上去的要复杂得多。</seg>
</tuv>
</tu>
<tu>
<tuv xml:lang="EN-US">
<seg>A good design must make it easy for a receiver to find the start of new frames while using little of the channel bandwidth. </seg>
</tuv>
<tuv xml:lang="ZH-CN">
<seg>一个好的设计方案必须使接收方很容易发现一个新帧的开始，同时所使用的信道带宽要少。</seg>
</tuv>
</tu>
<tu>
<tuv xml:lang="EN-US">
<seg>We will look at four methods:</seg>
</tuv>
<tuv xml:lang="ZH-CN">
<seg>我们将考察下列4种方法：</seg>
</tuv>
</tu>
<tu>
<tuv xml:lang="EN-US">
<seg>Byte count.</seg>
</tuv>
<tuv xml:lang="ZH-CN">
<seg>（1）字节计数法。</seg>
</tuv>
</tu>
<tu>
<tuv xml:lang="EN-US">
<seg>Flag bytes with byte stuffing.</seg>
</tuv>
<tuv xml:lang="ZH-CN">
<seg>（2）字节填充的标志字节法。</seg>
</tuv>
</tu>
<tu>
<tuv xml:lang="EN-US">
<seg>Flag bits with bit stuffing.</seg>
</tuv>
<tuv xml:lang="ZH-CN">
<seg>（3）比特填充的标志比特法。</seg>
</tuv>
</tu>
<tu>
<tuv xml:lang="EN-US">
<seg>Physical layer coding violations.</seg>
</tuv>
<tuv xml:lang="ZH-CN">
<seg>（4）物理层编码违禁法。</seg>
</tuv>
</tu>
<tu>
<tuv xml:lang="EN-US">
<seg>The first framing method uses a field in the header to specify the number of bytes in the frame. </seg>
</tuv>
<tuv xml:lang="ZH-CN">
<seg>第一种成帧方法利用头部中的一个字段来标识该帧中的字符数。</seg>
</tuv>
</tu>
<tu>
<tuv xml:lang="EN-US">
<seg>When the data link layer at the destination sees the byte count, it knows how many bytes follow and hence where the end of the frame is. </seg>
</tuv>
<tuv xml:lang="ZH-CN">
<seg>当接收方的数据链路层看到字符计数值时，它就知道后面跟着多少个字节，因此也就知道了该帧在哪里结束。</seg>
</tuv>
</tu>
<tu>
<tuv xml:lang="EN-US">
<seg>This technique is shown in Fig. 3-3(a) for four small example frames of sizes 5, 5, 8, and 8 bytes, respectively.</seg>
</tuv>
<tuv xml:lang="ZH-CN">
<seg>这项技术如图3-3（a）所示，其中4帧的大小分别为5、5、8和8个字节。</seg>
</tuv>
</tu>
<tu>
<tuv xml:lang="EN-US">
<seg>The trouble with this algorithm is that the count can be garbled by a transmission error. </seg>
</tuv>
<tuv xml:lang="ZH-CN">
<seg>这个算法的问题在于计数值有可能因为一个传输错误而被弄混。</seg>
</tuv>
</tu>
<tu>
<tuv xml:lang="EN-US">
<seg>For example, if the byte count of 5 in the second frame of Fig. 3-3(b) becomes a 7 due to a single bit flip, the destination will get out of synchronization. It will then be unable to locate the correct start of the next frame. </seg>
</tuv>
<tuv xml:lang="ZH-CN">
<seg>例如，如果第2帧中的计数值5由于一个比特反转而变成了7，如图3-3（b）所示，则接收方就会失去同步，它再也不可能找到下一帧的正确起始位置。</seg>
</tuv>
</tu>
<tu>
<tuv xml:lang="EN-US">
<seg>Even if the checksum is incorrect so the destination knows that the frame is bad, it still has no way of telling where the next frame starts. </seg>
</tuv>
<tuv xml:lang="ZH-CN">
<seg>即使校验和不正确，接收方知道该帧己经被损坏，它仍然无法知道下一帧从哪里开始。</seg>
</tuv>
</tu>
<tu>
<tuv xml:lang="EN-US">
<seg>Sending a frame back to the source asking for a retransmission does not help either, since the destination does not know how many bytes to skip over to get to the start of the retransmission. </seg>
</tuv>
<tuv xml:lang="ZH-CN">
<seg>在这种情况下，给发送方发回一个帧，要求重传也无济于事，因为接收方并不知道应该跳过多少个字节才能到达重传的开始处。</seg>
</tuv>
</tu>
<tu>
<tuv xml:lang="EN-US">
<seg>For this reason, the byte count method is rarely used by itself.</seg>
</tuv>
<tuv xml:lang="ZH-CN">
<seg>正是由于这个原因，字节计数方法本身很少被使用。</seg>
</tuv>
</tu>
<tu>
<tuv xml:lang="EN-US">
<seg>Figure 3-3. A byte stream. (a) Without errors. (b) With one error.</seg>
</tuv>
<tuv xml:lang="ZH-CN">
<seg>图3-3字节流（a）没有错误；（b）有一个错误</seg>
</tuv>
</tu>
<tu>
<tuv xml:lang="EN-US">
<seg>The second framing method gets around the problem of resynchronization after an error by having each frame start and end with special bytes. </seg>
</tuv>
<tuv xml:lang="ZH-CN">
<seg>第二种成帧方法考虑到了出错之后的重新同步问题，它让每个帧用一些特殊的字节作为开始和结束。</seg>
</tuv>
</tu>
<tu>
<tuv xml:lang="EN-US">
<seg>Often the same byte, called a flag byte, is used as both the starting and ending delimiter. This byte is shown in Fig. 3-4(a) as FLAG. </seg>
</tuv>
<tuv xml:lang="ZH-CN">
<seg>这些特殊字节通常都相同，称为标志字节（flag byte），作为帧的起始和结束分界符，如图3-4（a）中的FLAG所示。</seg>
</tuv>
</tu>
<tu>
<tuv xml:lang="EN-US">
<seg>Two consecutive flag bytes indicate the end of one frame and the start of the next. </seg>
</tuv>
<tuv xml:lang="ZH-CN">
<seg>两个连续的标志字节代表了一帧的结束和下一帧的开始。</seg>
</tuv>
</tu>
<tu>
<tuv xml:lang="EN-US">
<seg>Thus, if the receiver ever loses synchronization it can just search for two flag bytes to find the end of the current frame and the start of the next frame.</seg>
</tuv>
<tuv xml:lang="ZH-CN">
<seg>因此，如果接收方丢失了同步，它只需搜索两个标志字节就能找到当前帧的结束和下一帧的开始位置。</seg>
</tuv>
</tu>
<tu>
<tuv xml:lang="EN-US">
<seg>However, there is a still a problem we have to solve. </seg>
</tuv>
<tuv xml:lang="ZH-CN">
<seg>然而，还有问题必须要解决。</seg>
</tuv>
</tu>
<tu>
<tuv xml:lang="EN-US">
<seg>It may happen that the flag byte occurs in the data, especially when binary data such as photographs or songs are being transmitted. This situation would interfere with the framing. </seg>
</tuv>
<tuv xml:lang="ZH-CN">
<seg>当标志字节出现在数据中时，尤其是当传输二进制数据（比如照片或歌曲）时，这种情景往往会严重干扰到帧的分界。</seg>
</tuv>
</tu>
<tu>
<tuv xml:lang="EN-US">
<seg>One way to solve this problem is to have the sender’s data link layer insert a special escape byte (ESC) just before each “accidental” flag byte in the data. </seg>
</tuv>
<tuv xml:lang="ZH-CN">
<seg>有一种方法可以解决这个问题，发送方的数据链路层在数据中“偶尔”出现的每个标志字节的前面插入一个特殊的转义字节（ESC）。</seg>
</tuv>
</tu>
<tu>
<tuv xml:lang="EN-US">
<seg />
</tuv>
<tuv xml:lang="ZH-CN">
<seg />
</tuv>
</tu>
</body>
</tmx>